options {
    STATIC = false;
}

PARSER_BEGIN(FldwCompiler)
package javacc;

import java.io.*;
import java.lang.reflect.*;
import core.*;import examples.Examples;

public class FldwCompiler {
    public static void main(String[] args) {
//        String[] tests={"a<1.2"};
//        for (String arg : tests) {
            try {
//                            Class.forName("std.Std");
                parse(Examples.BlockExample4);
//                System.out.println(evaluate(arg));
//                return(evaluate(arg));
            } catch (ParseException ex) {
                System.err.println(ex.getMessage());
            }
//        }
    }

    public static void parse(String src) throws ParseException {
        Reader reader = new StringReader(src);
//        Object ret = new FldwCompiler(reader).expr_data();
//        System.out.println(ret);
        new FldwCompiler(reader).program();
    }
}

PARSER_END(FldwCompiler)

/*****************************************************************/
/***************************词法分析*******************************/
/*****************************************************************/

SKIP : // Ignoring spaces/tabs/newlines
{
        " "
    |   "\t"
    |   "\n"
    |   "\r"
    |   "\f"
}

SPECIAL_TOKEN : // Ignoring line commit
{
    < LINE_COMMIT : "//"(~["\n","\r"])* ("\n"|"\r\n"|"\r")? >
}

TOKEN : // Keywords and punctuation
{
        < SEMIC : ";" >
    |   < COMMA : "," >

    |   < LBR : "(" >
    |   < RBR : ")" >
    |   < RCBR : "}" >
    |   < LCBR : "{" >
    |   < RSBR : "]" >
    |   < LSBR : "[" >

    |   < ASSIGN : "=" >
    |   < PLUS : "+" >
    |   < MINUS : "-" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < MOD : "%" >
    |   < INC : "++" >
    |   < DEC : "--" >

    |   < EXLM : "!" >
    |   < LOGIC_EQUAL : "==" >
    |   < LOGIC_NOT : "!=" >
    |   < LOGIC_AND : "&&" >
    |   < LOGIC_OR : "||" >
    |   < LEFT : "<" >
    |   < RIGHT : ">" >
    |   < LEFT_EQUAL : "<=" >
    |   < RIGHT_EQUAL : ">=" >

    |   < IF : "if" >
    |   < ELSE : "else" >
//    |   < RETURN : "return" >
//    |   < STRING : "string" >
    |   < WHILE : "while" >

    |   < FUNC : "function" >
//    |   < FUNC_IN : "in" >
//    |   < FUNC_OUT : "out" >

    |   < FLOW : "|" >
    |   < ITER : "->" >

//    |   < STDIN : "stdin" >
//    |   < STDOUT : "stdout" >
    |   < IMPORT : "import" >
    |   < DOT : "." >
}

TOKEN : // value: int
{
    < INT_VALUE : ["1"-"9"] (["0"-"9"])*
            |   "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+
            |   "0" (["0"-"7"])*
            >
}

TOKEN : // value: double
{
    < DOUBLE_VALUE : ["1"-"9"] (["0"-"9"])*("."(["0"-"9"])*)? >
}

TOKEN : // value: bool
{
    < BOOL_VALUE : "true"|"false" >
}

MORE : // value: string
{
    < "\"" > : IN_STRING
}
< IN_STRING > MORE :
{
        < (~["\"", "\\", "\n", "\r"])+ >
    |   < "\\"(["0"-"7"]){3} >
    |   < "\\"~[] >
}
< IN_STRING > TOKEN :
{
    < STRING_VALUE : "\"" > : DEFAULT
}

TOKEN : // symbol
{
    < SYMBOL : ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

TOKEN : // anything not recognised so far
{
    < OTHER : ~[] >
}

/*****************************************************************/
/***************************语法分析*******************************/
/*****************************************************************/
TerminalData terminal_data() :
{
    Datable.DataType type;
    Token x;
}
{
    // 语法：terminal_data() = < INT_VALUE > | < DOUBLE_VALUE > | < BOOL_VALUE > | < STRING_VALUE >
    (   x = < INT_VALUE >
        {
            type = Datable.DataType.Int;
        }
    |   x = < DOUBLE_VALUE >
        {
            type = Datable.DataType.Double;
        }
    |   x = < BOOL_VALUE >
        {
            type = Datable.DataType.Bool;
        }
    |   x = < STRING_VALUE >
        {
            type = Datable.DataType.String;
        }
    )
    {
        return new TerminalData(type, x.image);
    }
}

SymbolData symbol_data() :
{
    Token symbol;
}
{
    // 语法：symbol_data() = < SYMBOL>
    symbol = < SYMBOL>
    {
        return SymbolTable.CurrentSymbolTable().PutOrGetSymbol(symbol.image, SymbolTable.SymbolType.Data).assertGetSymbolData();
    }
}

// TODO：tmp
ExprData expr_data() :
{
    ExprData exprData = new ExprData();
    Datable leftData, rightData;
}
{
    leftData = data()
    {
        exprData.setLeftData(leftData);
    }
    (
            < LEFT > { exprData.setOp(ExprData.ExprOp.LeftOp); }
        |   < RIGHT > { exprData.setOp(ExprData.ExprOp.RightOp); }
        |   < LEFT_EQUAL >
        |   < RIGHT_EQUAL >
    )
    rightData = data()
    {
            exprData.setRightData(rightData);
    }
    {
        return exprData;
    }
}

Datable data() :
{
    Datable data;
}
{
    // 语法：data() = terminal_data() | symbol_data() | expr_data()
    (    data = terminal_data()
    |    data = symbol_data()
    )
    {
        return data;
    }
}

ListFlow list_flow() :
{
    ListFlow listFlow = new ListFlow();
    Datable data;
}
{
    // 语法：list_flow() = < LSBR  > data() ( < COMMA > data() )* < RSBR >
    < LSBR  >
    data = data()
    {
        listFlow.Push(data);
    }
    ( < COMMA > data = data()
        {
            listFlow.Push(data);
        }
    )*
    < RSBR >
    {
//        System.out.println(listFlow);
        return listFlow;
    }
}

//SymbolFlow symbol_flow() :
//{
//}
//{
//    // 语法：symbol_flow() = < ITER> <SYMBOL> stmt()
//    {
////        System.out.println(new SymbolFlow());
//        return new SymbolDataFlow();
//    }
//}

IfElseFlow if_else_flow() :
{
    ExprData conditionData;
    Flowable trueFlow;
    Flowable falseFlow = null;
}
{
    // 语法：if_else_stmt() = < IF > < LBR > expr_data() < RBR > block() [ <ELSE > block() ]
    < IF > < LBR > conditionData = expr_data() < RBR > trueFlow = block_flow() [ <ELSE > falseFlow = block_flow() ]
    {
        return new IfElseFlow(conditionData, trueFlow, falseFlow);
    }
}

WhileFlow while_flow() :
{
    ExprData conditionData;
    Flowable trueFlow;
}
{
    // 语法：< WHILE > < LBR > expr_data() < RBR > block()
    < WHILE > < LBR > conditionData = expr_data() < RBR > trueFlow = block_flow()
    {
        return new WhileFlow(conditionData, trueFlow);
    }
}

FuncFlow func_flow() :
{
    Token funcSymbol;
    ListFlow paramFlow = new ListFlow();
    FuncFlow funcFlow;
}
{
    funcSymbol = < SYMBOL > < LBR > [ paramFlow = list_flow()] < RBR >
    {
    funcFlow = SymbolTable.CurrentSymbolTable().RecurseGetSymbol(funcSymbol.image).assertGetFuncFlow();
    return new FuncFlow(funcFlow, paramFlow);
}
}

HeadTailFlow head_tail_flow() :
{
    SymbolData headData;
    Token tailListFlowSymbol;
    Flowable tailListFlow;
    HeadTailFlow headTailFlow;
}
{
    // 语法：head_tail_flow() = < LSBR  > symbol_data() < SEMIC > < SYMBOL> < RSBR >
    < LSBR  > headData = symbol_data() < SEMIC >
    tailListFlowSymbol = < SYMBOL>
    {
        tailListFlow = SymbolTable.CurrentSymbolTable().PutOrGetSymbol(tailListFlowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
    }
    < RSBR >
    {
        return new HeadTailFlow(headData, tailListFlow);
    }
}

BlockFlow block_flow() : // block 不能嵌套
{
    BlockFlow blockFlow;
    Flowable topFlow;
}
{
    // 语法：block() = < LCBR > (flowing)* < RCBR > [ < EXLM > ]
    < LCBR > { Core.setEagerFlowing(false); SymbolTable.EnterBlock(null); blockFlow = new BlockFlow();}
//    ( import_stmt() )*
    (
        topFlow = flowing() { blockFlow.addFlow(topFlow); }
    )*
//    stmts()
    < RCBR > { Core.setEagerFlowing(true); SymbolTable.ExitBlock(); }
//    [ < EXLM > { blockFlow.Flowing(); } ]
    {
//        System.err.println("blcokFlow: "+blockFlow);
        return blockFlow;
    }
}

Flowable flow() :
{
    Flowable flow = new ListFlow();
    Token flowSymbol;
}
{
    // 语法：flow() = list_flow() | symbol_flow() | func_flow()
    (

//        LOOKHEAD 的要放在最前面
        LOOKAHEAD(2) flow = func_flow() // 预读 < SYMBOL > < LBR >
    |   LOOKAHEAD(3) flow = head_tail_flow() // 预读 < LSBR > < SYMBOL > <SEMIC >
    |   flowSymbol = < SYMBOL>
        {
            flow = SymbolTable.CurrentSymbolTable().PutOrGetSymbol(flowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
        }
    |   flow = list_flow()
    |   flow = if_else_flow()
    |   flow = while_flow()
    |   flow = block_flow()
    )
    {
        return flow;
    }
}

Flowable flowing() :
{
    Flowable topFlow = new ListFlow();
    Flowable leftFlow = new ListFlow();
    Flowable rightFlow = new ListFlow();
}
{
    // 语法：match_flow() = flow() < FLOW > flow()
    topFlow = flow()
    {
        leftFlow = topFlow;
    }
    (< FLOW >
    rightFlow = flow()
    {
        leftFlow.SetNext(rightFlow);
//                                        System.err.println(leftFlow.GetSymbol() +leftFlow.GetIdentity()+ "->"+rightFlow.GetSymbol()+rightFlow.GetIdentity());
//                                        System.err.println("leftFlow:\n"+leftFlow);
//                                        System.err.println("rightFlow:\n"+rightFlow);
//                                        System.err.println("symboltable:\n"+SymbolTable.CurrentSymbolTable());
        leftFlow = rightFlow;
    }
    )*
    {
//        System.out.println("Root Symbol Table: " + SymbolTable.CurrentSymbolTable());
//        System.out.println("before flowing: " + topFlow);
        if (Core.isEagerFlowing()) {
//            System.out.println("eager! flowing");
            topFlow.Flowing();
        }
//        System.out.println("after flowing: " + topFlow);
//                                        System.err.println("topFlow:\n"+topFlow);
//                                                System.err.println("symboltable:\n"+SymbolTable.CurrentSymbolTable());
        return topFlow;
    }
}

void def_func_stmt() : // 函数就是一个有参数和符号关联的 Block
{
    Token func_symbol;
    ListFlow param_flow = null;
    BlockFlow block_flow;
}
{
    // 语法：def_func_stmt() = < FUNC > < SYMBOL > < LBR > [ list_flow() ] < RBR > block_stmt()
    < FUNC > func_symbol = < SYMBOL >
    < LBR > { SymbolTable.EnterBlock(func_symbol.image + FuncFlow.FuncSymbolTableSuffix); }
    [ param_flow = list_flow() ]
    < RBR >
    block_flow = block_flow() { SymbolTable.ExitBlock(); }
    {
        SymbolTable.CurrentSymbolTable().PutSymbol(func_symbol.image, SymbolTable.SymbolType.Flow, new FuncFlow(func_symbol.image, param_flow, block_flow));
    }
}

void import_stmt() :
{
    Token package_name;
    Token module_name;
}
{
    // 语法：import_stmt() = < IMPORT > < STRING_VALUE >
    < IMPORT >
    package_name = < SYMBOL >
    < DOT >
    module_name = < SYMBOL >
    {
        try {
             Class<?> clazz = Class.forName(package_name.image + "." + module_name.image);
             Method loadModule = clazz.getMethod(Core.ModuleLoadFunc);
             loadModule.invoke(null);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException ex) {
            throw new RuntimeException(ex.getMessage());
        }
    }
}

void stmt() :
{
}
{
    flowing() | def_func_stmt() | import_stmt() //| block_flow()
    {
        return;
    }
}

void stmts() :
{
}
{
    ( stmt() )*
    {
        return;
    }
}



void program() :
{
}
{
    stmts() < EOF >
    {
        return;
    }
}
