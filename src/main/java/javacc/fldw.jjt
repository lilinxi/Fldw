options {
    STATIC = false;
}

PARSER_BEGIN(FldwCompiler)
package javacc;

import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import core.*;
import examples.UnitTest;

public class FldwCompiler {
    public static void main(String[] args) {
        UnitTest.UnitTest = false;
        if (args.length > 0) {
            String arg = args[0];
            if (arg.endsWith(".fldw")) {
                try {
                    StringBuilder buffer = new StringBuilder();
                    String line;  // 用来保存每行读取的内容
                    InputStream is = new FileInputStream(arg);
                    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
                    line = reader.readLine(); // 读取第一行
                    while (line != null) { // 如果 line 为空说明读完了
                        buffer.append(line); // 将读到的内容添加到 buffer 中
                        buffer.append("\n"); // 添加换行符
                        line = reader.readLine(); // 读取下一行
                    }
                    reader.close();
                    is.close();
                    parse(buffer.toString());
                } catch (ParseException | ExplainException | IOException e) {
                    System.err.println(e.getMessage());
                }
            } else {
                try {
                    parse(arg);
                } catch (ParseException | ExplainException e) {
                    System.err.println(e.getMessage());
                }
            }
            return;
        }

        System.out.println("Welcome to FLDW, version 1.0.0");
        Scanner sc = new Scanner(System.in);
        while (true) {
            System.out.print("fldw > ");
            while (sc.hasNextLine()) {
                String in = sc.nextLine();
                if (in.equals("exit")) {
                    System.out.println("Bye!");
                    return;
                }
                try {
                    parse(in);
                } catch (ParseException | ExplainException e) {
                    System.err.println(e.getMessage());
                }
                System.out.print("fldw > ");
            }
        }
    }

    public static void parse(String src) throws ParseException, ExplainException {
        Reader reader = new StringReader(src);
        new FldwCompiler(reader).program();
    }
}

PARSER_END(FldwCompiler)

/*****************************************************************/
/***************************词法分析*******************************/
/*****************************************************************/

SKIP : // Ignoring spaces/tabs/newlines
{
        " "
    |   "\t"
    |   "\n"
    |   "\r"
    |   "\f"
}

SPECIAL_TOKEN : // Ignoring line commit
{
    < LINE_COMMIT : "//"(~["\n","\r"])* ("\n"|"\r\n"|"\r")? >
}

TOKEN : // Keywords and punctuation
{
        < SEMIC : ";" >
    |   < COMMA : "," >

    |   < LBR : "(" >
    |   < RBR : ")" >
    |   < RCBR : "}" >
    |   < LCBR : "{" >
    |   < RSBR : "]" >
    |   < LSBR : "[" >

    |   < PLUS : "+" >
    |   < MINUS : "-" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < MOD : "%" >

    |   < LOGIC_EQUAL : "==" >
    |   < LOGIC_NOT : "!=" >
    |   < LOGIC_AND : "&&" >
    |   < LOGIC_OR : "||" >
    |   < LEFT : "<" >
    |   < RIGHT : ">" >
    |   < LEFT_EQUAL : "<=" >
    |   < RIGHT_EQUAL : ">=" >

    |   < IF : "if" >
    |   < ELSE : "else" >
    |   < WHILE : "while" >
    |   < FOR : "for" >

    |   < FUNC : "function" >

    |   < FLOWING : "|" >       // 数据管道操作
    |   < MATCHING : "->" >     // 模式匹配操作
    |   < HASHTAG : "#" >       // 变量取值操作
    |   < EXLM : "!" >          // 显示定义为临时变量

    |   < IMPORT : "import" >
    |   < DOT : "." >
}

TOKEN : // value: int
{
    < INT_VALUE : ["1"-"9"] (["0"-"9"])*
            |   "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+
            |   "0" (["0"-"7"])*
            >
}

TOKEN : // value: double
{
    < DOUBLE_VALUE : ["1"-"9"] (["0"-"9"])*("."(["0"-"9"])*)? >
}

TOKEN : // value: bool
{
    < BOOL_VALUE : "true"|"false" >
}

MORE : // value: string
{
    < "\"" > : IN_STRING
}
< IN_STRING > MORE :
{
        < (~["\"", "\\", "\n", "\r"])+ >
    |   < "\\"(["0"-"7"]){3} >
    |   < "\\"~[] >
}
< IN_STRING > TOKEN :
{
    < STRING_VALUE : "\"" > : DEFAULT
}

TOKEN : // value: null
{
    < NULL_VALUE : "null" >
}

TOKEN : // symbol
{
    < SYMBOL : ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

TOKEN : // anything not recognised so far
{
    < OTHER : ~[] >
}

/*****************************************************************/
/***************************语法分析*******************************/
/*****************************************************************/
TerminalData terminal_data() throws ExplainException :
{
    Datable.DataType type;
    Token terminalToken;
}
{
    // 语法：terminal_data() = < INT_VALUE > | < DOUBLE_VALUE > | < BOOL_VALUE > | < STRING_VALUE >
    (   terminalToken = < INT_VALUE >
        {
            type = Datable.DataType.Int;
        }
    |   terminalToken = < DOUBLE_VALUE >
        {
            type = Datable.DataType.Double;
        }
    |   terminalToken = < BOOL_VALUE >
        {
            type = Datable.DataType.Bool;
        }
    |   terminalToken = < STRING_VALUE >
        {
            type = Datable.DataType.String;
        }
    |   terminalToken = < NULL_VALUE > { type = null; }
    )
    {
        return new TerminalData(type, terminalToken.image);
    }
}

SymbolData symbol_data() throws ExplainException :
{
    Token symbolToken;
    SymbolData symbolData;
    boolean partialSymbol = false;
}
{
    // 语法：symbol_data() = [ < EXLM > ] < SYMBOL>
    [ < EXLM > { partialSymbol=true; } ]
    symbolToken = < SYMBOL>
    {
        if (partialSymbol) {
            symbolData = SymbolTable.CurrentSymbolTable().PutOrGetSymbol(symbolToken.image, SymbolTable.SymbolType.Data).assertGetSymbolData();
        } else {
            symbolData = SymbolTable.CurrentSymbolTable().PutOrRecurseGetSymbol(symbolToken.image, SymbolTable.SymbolType.Data).assertGetSymbolData();
        }
        return symbolData;
    }
}

Datable expr_data() throws ExplainException :
{
    ExprData topExprData = new ExprData();
    Datable leftExprData;
    Datable rightExprData = null;
}
{
    // 语法：expr_data() = expr1_data() ( < LOGIC_OR > expr1_data() )*
    leftExprData = expr1_data()
    (
        < LOGIC_OR > { topExprData.setOp(ExprData.ExprOp.LogicOrOp); }
        rightExprData = expr1_data()
        {
            topExprData.setLeftData(leftExprData);
            topExprData.setRightData(rightExprData);
            leftExprData = topExprData.Clone();
        }
    )*
    {
                if (rightExprData != null) {
                    return topExprData;
                } else {
                    return leftExprData;
                }
    }
}

Datable expr1_data() throws ExplainException :
{
    ExprData topExprData = new ExprData();
    Datable leftExprData;
    Datable rightExprData = null;
}
{
    // 语法：expr1_data() = expr2_data() ( < LOGIC_AND > expr2_data() )*
    leftExprData = expr2_data()
    (
        < LOGIC_AND> { topExprData.setOp(ExprData.ExprOp.LogicAndOp); }
        rightExprData = expr2_data()
        {
            topExprData.setLeftData(leftExprData);
            topExprData.setRightData(rightExprData);
            leftExprData = topExprData.Clone();
        }
    )*
    {
          if (rightExprData != null) {
              return topExprData;
          } else {
              return leftExprData;
          }
    }
}

Datable expr2_data() throws ExplainException :
{
    ExprData topExprData = new ExprData();
    Datable leftExprData;
    Datable rightExprData = null;
}
{
    // 语法：expr2_data() = expr3_data() ( (< LEFT > | < RIGHT > | < LEFT_EQUAL > | < RIGHT_EQUAL > | < LOGIC_EQUAL > | < LOGIC_NOT >) expr3_data() )*
    leftExprData = expr3_data()
    (
        LOOKAHEAD(2) (
            < LEFT > { topExprData.setOp(ExprData.ExprOp.LeftOp); }
        |   < RIGHT > { topExprData.setOp(ExprData.ExprOp.RightOp); }
        |   < LEFT_EQUAL > { topExprData.setOp(ExprData.ExprOp.LeftEqualOp); }
        |   < RIGHT_EQUAL > { topExprData.setOp(ExprData.ExprOp.RightEqualOp); }
        |   < LOGIC_EQUAL > { topExprData.setOp(ExprData.ExprOp.LogicEqualOp);}
        |   < LOGIC_NOT > { topExprData.setOp(ExprData.ExprOp.LogicNotEqualOp);}
        )
        rightExprData = expr3_data()
        {
            topExprData.setLeftData(leftExprData);
            topExprData.setRightData(rightExprData);
            leftExprData = topExprData.Clone();
        }
    )*
    {
           if (rightExprData != null) {
               return topExprData;
           } else {
               return leftExprData;
           }
    }
}

Datable expr3_data() throws ExplainException :
{
    ExprData topExprData = new ExprData();
    Datable leftExprData;
    Datable rightExprData = null;
}
{
    // 语法：expr3_data() = expr4_data() ( (< PLUS > | < MINUS >) expr4_data() )*
    leftExprData = expr4_data()
    (
        (   < PLUS > { topExprData.setOp(ExprData.ExprOp.AddOp); }
        |   < MINUS > { topExprData.setOp(ExprData.ExprOp.SubOp); }
        )
        rightExprData = expr4_data()
        {
            topExprData.setLeftData(leftExprData);
            topExprData.setRightData(rightExprData);
            leftExprData = topExprData.Clone();
        }
    )*
    {
        if (rightExprData != null) {
            return topExprData;
        } else {
            return leftExprData;
        }
    }
}

Datable expr4_data() throws ExplainException :
{
    ExprData topExprData = new ExprData();
    Datable leftExprData;
    Datable rightExprData = null;
}
{
    // 语法：expr4_data() = term() ( (< MULT > | < DIV > | < MOD >) term() )*
    leftExprData = term()
    (
        (   < MULT > { topExprData.setOp(ExprData.ExprOp.MulOp); }
        |   < DIV > { topExprData.setOp(ExprData.ExprOp.DivOp); }
        |   < MOD > { topExprData.setOp(ExprData.ExprOp.ModOp); }
        )
        rightExprData = term()
        {
            topExprData.setLeftData(leftExprData);
            topExprData.setRightData(rightExprData);
            leftExprData = topExprData.Clone();
        }
    )*
    {
        if (rightExprData != null) {
            return topExprData;
        } else {
            return leftExprData;
        }
    }
}

Datable term() throws ExplainException :
{
    Datable data;
}
{
    // 语法：term() = terminal_data() | symbol_data() | ( < LBR > expr_data() < RBR > )
    (    data = terminal_data()
    |    data = symbol_data()
    |    < LBR > data = expr_data() < RBR >
    )
    {
        return data;
    }
}

Datable data() throws ExplainException :
{
    Datable data;
}
{
    // 语法：data() = expr_data() | symbol_data() | terminal_data()
    (   LOOKAHEAD(3) data = expr_data()
    |   LOOKAHEAD(3) data = symbol_data()
    |   LOOKAHEAD(3) data = terminal_data()
    )
    {
        return data;
    }
}

ListFlow list_flow() throws ExplainException :
{
    ListFlow listFlow = new ListFlow();
    Datable data;
}
{
    // 语法：list_flow() = [ < HASHTAG > ] < LSBR  > data() ( [ < COMMA > ] data() )* < RSBR >
    [ < HASHTAG > { listFlow.setCopyValue(true);} ] < LSBR  >
    ( [< COMMA >] data = data()
        {
            listFlow.Push(data);
        }
    )*
    < RSBR >
    {
        return listFlow;
    }
}

IfElseFlow if_else_flow() throws ExplainException :
{
    Datable conditionData;
    Flowable trueFlow;
    Flowable falseFlow = null;
}
{
    // 语法：if_else_stmt() = < IF > < LBR > data() < RBR > block() [ < ELSE > block() ]
    < IF > < LBR > conditionData = data() < RBR > trueFlow = block_flow("if") [ <ELSE > falseFlow = block_flow("else") ]
    {
        return new IfElseFlow(conditionData, trueFlow, falseFlow);
    }
}

WhileFlow while_flow() throws ExplainException :
{
    Datable conditionData;
    Flowable trueFlow;
}
{
    // 语法：while_flow() = < WHILE > < LBR > data() < RBR > block()
    < WHILE > < LBR > conditionData = data() < RBR > trueFlow = block_flow("while")
    {
        return new WhileFlow(conditionData, trueFlow);
    }
}

ForFlow for_flow() throws ExplainException :
{
    Flowable iterFlow;
    SymbolData iterSymbolData;
    BlockFlow forBlockFlow;
}
{
    // 语法：for_flow() = < FOR > < LBR > flow() < MATCHING > symbol_data() < RBR > block_flow()
    < FOR > < LBR > iterFlow = flow() < MATCHING > iterSymbolData = symbol_data() < RBR > forBlockFlow = block_flow("for")
    {
        return new ForFlow(iterFlow, iterSymbolData, forBlockFlow);
    }
}

DelayFuncFlow func_flow() throws ExplainException :
{
    Token funcSymbol;
    ListFlow paramFlow = null;
    DelayFuncFlow funcFlow;
}
{
    // 语法：func_flow() = < SYMBOL > < LBR > [ list_flow() ] < RBR >
    funcSymbol = < SYMBOL > < LBR > [ paramFlow = list_flow()] < RBR >
    {
        funcFlow = SymbolTable.CurrentSymbolTable().RecurseGetSymbol(funcSymbol.image).assertGetDelayFuncFlow();
        if (paramFlow != null) {
            funcFlow.setParamFlow(paramFlow);
        }
        return funcFlow;
    }
}

HeadTailFlow head_tail_flow() throws ExplainException :
{
    SymbolData headData;
    Token tailListFlowSymbol;
    Flowable tailListFlow;
    HeadTailFlow headTailFlow;
    boolean partialSymbol=false;
}
{
    // 语法：head_tail_flow() = < LSBR  > symbol_data() < SEMIC > [ EXLM ] < SYMBOL> < RSBR >
    < LSBR  > headData = symbol_data() < SEMIC >
    [ < EXLM > {partialSymbol=true;} ] tailListFlowSymbol = < SYMBOL>
    {
        if (partialSymbol) {
            tailListFlow = SymbolTable.CurrentSymbolTable().PutOrGetSymbol(tailListFlowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
        } else {
            tailListFlow = SymbolTable.CurrentSymbolTable().PutOrRecurseGetSymbol(tailListFlowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
        }
    }
    < RSBR >
    {
        return new HeadTailFlow(headData, tailListFlow);
    }
}

BlockFlow block_flow(String blockName) throws ExplainException :
{
    BlockFlow blockFlow;
    Flowable topFlow;
}
{
    // 语法：block() = < LCBR > ( flowing() )* < RCBR >
    < LCBR >
    {
        Core.AddEager();
        SymbolTable.EnterBlock(blockName);
        blockFlow = new BlockFlow(); // 在新符号表压栈之后再创建流块
    }
    (
       topFlow = flowing() { blockFlow.addFlow(topFlow); }
    )*
    < RCBR > { Core.SubEager(); SymbolTable.ExitBlock(); }
    {
        return blockFlow;
    }
}

Flowable flow() throws ExplainException :
{
    Flowable flow = new ListFlow();
    Token flowSymbol;
    boolean partialSymbol=false;
}
{
    // 语法：flow() = func_flow() | head_tail_flow() | ([ < EXLM > ] < SYMBOL>) | list_flow() | if_else_flow() | while_flow() | block_flow() | for_flow()
    (

//        LOOKHEAD 的要放在最前面
        LOOKAHEAD(2) flow = func_flow()         // 预读 < SYMBOL > < LBR >
    |   LOOKAHEAD(3) flow = head_tail_flow()    // 预读 < LSBR > < SYMBOL > <SEMIC >
    |   (
            [ < EXLM > {partialSymbol=true;} ] flowSymbol = < SYMBOL>
            {
                if (partialSymbol) {
                    flow = SymbolTable.CurrentSymbolTable().PutOrGetSymbol(flowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
                } else {
                    flow = SymbolTable.CurrentSymbolTable().PutOrRecurseGetSymbol(flowSymbol.image, SymbolTable.SymbolType.Flow).assertGetFlowable();
                }
            }
        )
    |   flow = list_flow()
    |   flow = if_else_flow()
    |   flow = while_flow()
    |   flow = block_flow("block")
    |   flow = for_flow()
    )
    {
        return flow;
    }
}

Flowable flowing() throws ExplainException :
{
    Flowable topFlow = new ListFlow();
    Flowable leftFlow = new ListFlow();
    Flowable rightFlow = new ListFlow();
}
{
    // 语法：flowing() = flow() ( ( < MATCHING > | < FLOWING > ) flow() )*
    topFlow = flow()
    {
        leftFlow = topFlow;
    }
    (
        LOOKAHEAD(1) ( // TODO Why lookahead
            < MATCHING > { leftFlow.SetFlowOp(Flowable.FlowOp.Matching);}
        |   < FLOWING >  { leftFlow.SetFlowOp(Flowable.FlowOp.Pushing);}
        )
    rightFlow = flow()
    {
        leftFlow.SetNextFlowing(rightFlow);
        leftFlow = rightFlow;
    }
    )*
    {
        if (Core.IsEager()) {
            topFlow.Flowing();
        }
        return topFlow;
    }
}

void def_func_stmt() throws ExplainException : // 函数就是一个有参数和符号关联的 Block
{
    Token funcSymbol;
    int count = 0; // {: +1; }: -1
    Token curToken;
    StringBuilder funcBuffer = new StringBuilder();
}
{
    // 语法：def_func_stmt() = < FUNC > < SYMBOL > < LBR > [ list_flow() ] < RBR > block_flow()
    < FUNC > funcSymbol = < SYMBOL >
    {
        do{
            curToken = token_source.getNextToken();
            funcBuffer.append(curToken);
            funcBuffer.append(" ");
        } while (curToken.image!= ")");
        curToken = token_source.getNextToken();
        if (curToken.image=="{"){
            funcBuffer.append(curToken);
            funcBuffer.append(" ");
            count++;
            do{
                curToken = token_source.getNextToken();
                funcBuffer.append(curToken);
                funcBuffer.append(" ");
                if (curToken.image=="{") {
                    count++;
                } else if (curToken.image=="}") {
                    count--;
                }
            }while (count!=0);
        }
    }
    {
        SymbolTable.CurrentSymbolTable().PutSymbol(funcSymbol.image, SymbolTable.SymbolType.Function, funcBuffer.toString());
    }
}

FuncFlow make_func_flow(String funcName) throws ExplainException : // 函数就是一个有参数和符号关联的 Block
{
    ListFlow param_flow = null;
    BlockFlow block_flow;
}
{
    // 语法：make_func_flow() = < LBR > [ list_flow() ] < RBR > block_flow()
    < LBR > { SymbolTable.EnterBlock(funcName); }
    [ param_flow = list_flow() ]
    < RBR >
    block_flow = block_flow("func") { SymbolTable.ExitBlock(); }
    {
        return new FuncFlow(param_flow, block_flow);;
    }
}

void import_stmt() throws ExplainException :
{
    Token package_name;
    Token module_name;
}
{
    // 语法：import_stmt() = < IMPORT > < SYMBOL > < DOT > < SYMBOL >
    < IMPORT >
    package_name = < SYMBOL >
    < DOT >
    module_name = < SYMBOL >
    {
        try {
             Class<?> clazz = Class.forName(package_name.image + "." + module_name.image);
             Method loadModule = clazz.getMethod(Core.ModuleLoadFunc);
             loadModule.invoke(null);
        } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException ex) {
            throw new RuntimeException(ex.getMessage());
        }
    }
}

void stmt() throws ExplainException :
{
}
{
    // 语法：stmt() = flowing() | def_func_stmt() | import_stmt()
        flowing()
    |   def_func_stmt()
    |   import_stmt()
    {
        return;
    }
}

void stmts() throws ExplainException :
{
}
{
    // 语法：stmts() = ( stmt() )*
    ( stmt() )*
    {
        return;
    }
}

void program() throws ExplainException :
{
}
{
    // 语法：program() = stmts() < EOF >
    stmts() < EOF >
    {
        return;
    }
}
