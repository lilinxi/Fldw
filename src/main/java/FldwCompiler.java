/* FldwCompiler.java */
/* Generated By:JavaCC: Do not edit this line. FldwCompiler.java */
import java.io.*;
import core.*;

public class FldwCompiler implements FldwCompilerConstants {
    public static void main(String[] args) {
        String[] tests={"a<1.2"};
        for (String arg : tests) {
            try {
                evaluate(arg);
//                System.out.println(evaluate(arg));
//                return(evaluate(arg));
            } catch (ParseException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }

    public static void evaluate(String src) throws ParseException {
        Reader reader = new StringReader(src);
        Object ret = new FldwCompiler(reader).expr_data();
        System.out.println(ret);
    }

/*****************************************************************/
/***************************语法分析*******************************/
/*****************************************************************/
  final public TerminalData terminal_data() throws ParseException {Datable.DataType type;
    Token x;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_VALUE:{
      x = jj_consume_token(INT_VALUE);
type = Datable.DataType.Int;
      break;
      }
    case DOUBLE_VALUE:{
      x = jj_consume_token(DOUBLE_VALUE);
type = Datable.DataType.Double;
      break;
      }
    case BOOL_VALUE:{
      x = jj_consume_token(BOOL_VALUE);
type = Datable.DataType.Bool;
      break;
      }
    case STRING_VALUE:{
      x = jj_consume_token(STRING_VALUE);
type = Datable.DataType.String;
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new TerminalData(type, x.image);}
    throw new Error("Missing return statement in function");
}

  final public SymbolData symbol_data() throws ParseException {Token x;
    // 语法：symbol_data() = < SYMBOL>
        x = jj_consume_token(SYMBOL);
{if ("" != null) return new SymbolData(x.image);}
    throw new Error("Missing return statement in function");
}

// tmp
  final public ExprData expr_data() throws ParseException {ExprData exprData = new ExprData();
    Datable leftData, rightData;
    leftData = data();
exprData.setLeftData(leftData);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      jj_consume_token(LEFT);
exprData.setOp(ExprData.ExprOp.LeftOp);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
exprData.setOp(ExprData.ExprOp.RightOp);
      break;
      }
    case LEFT_EQUAL:{
      jj_consume_token(LEFT_EQUAL);
      break;
      }
    case RIGHT_EQUAL:{
      jj_consume_token(RIGHT_EQUAL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightData = data();
exprData.setRightData(rightData);
{if ("" != null) return exprData;}
    throw new Error("Missing return statement in function");
}

  final public Datable data() throws ParseException {Datable data;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_VALUE:
    case DOUBLE_VALUE:
    case BOOL_VALUE:
    case STRING_VALUE:{
      data = terminal_data();
      break;
      }
    case SYMBOL:{
      data = symbol_data();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return data;}
    throw new Error("Missing return statement in function");
}

  final public ListFlow list_flow() throws ParseException {ListFlow listFlow = new ListFlow();
    Datable data;
    jj_consume_token(LSBR);
    data = data();
listFlow.Push(data);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      data = data();
listFlow.Push(data);
    }
    jj_consume_token(RSBR);
{if ("" != null) return listFlow;}
    throw new Error("Missing return statement in function");
}

  final public SymbolFlow symbol_flow() throws ParseException {
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public IfElseFlow if_else_flow() throws ParseException {
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public FuncFlow func_flow() throws ParseException {
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public Flowable flow() throws ParseException {Flowable flow;
    flow = list_flow();
{if ("" != null) return flow;}
    throw new Error("Missing return statement in function");
}

  final public Flowable flowing() throws ParseException {Flowable leftFlow, rightFlow;
    // 语法：match_flow() = flow() < FLOW > flow()
        leftFlow = flow();
    jj_consume_token(FLOW);
    rightFlow = flow();
leftFlow.SetNext(rightFlow);
        {if ("" != null) return leftFlow;}
    throw new Error("Missing return statement in function");
}

  final public void if_else_stmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LBR);
    expr_data();
    jj_consume_token(RBR);
    block();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      block();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return;}
}

  final public void while_stmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LBR);
    expr_data();
    jj_consume_token(RBR);
    block();
{if ("" != null) return;}
}

  final public void def_func_stmt() throws ParseException {
    jj_consume_token(FUNC);
    symbol_data();
    jj_consume_token(LBR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SYMBOL:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      symbol_data();
    }
    jj_consume_token(RBR);
    block();
{if ("" != null) return;}
}

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSBR:{
      flowing();
      break;
      }
    case IF:{
      if_else_stmt();
      break;
      }
    case WHILE:{
      while_stmt();
      break;
      }
    case FUNC:{
      def_func_stmt();
{if ("" != null) return;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void stmts() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSBR:
      case IF:
      case WHILE:
      case FUNC:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      stmt();
    }
{if ("" != null) return;}
}

  final public void block() throws ParseException {
    jj_consume_token(LCBR);
    stmts();
    jj_consume_token(RCBR);
{if ("" != null) return;}
}

  final public void program() throws ParseException {
    stmts();
    jj_consume_token(0);
{if ("" != null) return;}
}

  /** Generated Token Manager. */
  public FldwCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0xf0000000,0x0,0x100,0x0,0x0,0x4000,0x4000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x21c0,0x0,0x61c0,0x0,0x2,0x4000,0xd,0xd,};
	}

  /** Constructor with InputStream. */
  public FldwCompiler(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FldwCompiler(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new FldwCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public FldwCompiler(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new FldwCompilerTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new FldwCompilerTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public FldwCompiler(FldwCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FldwCompilerTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[48];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 48; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
